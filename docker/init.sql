-- Create Tables
create table authority
(
    id             bigint generated by default as identity
        primary key,
    authority_name varchar(255)
        constraint authority_authority_name_check
            check ((authority_name)::text = ANY
                   ((ARRAY ['READ'::character varying, 'EDIT'::character varying, 'CREATE'::character varying, 'DELETE'::character varying])::text[]))
);

create table category
(
    id   bigint generated by default as identity
        primary key,
    name varchar(255)
);

create table role
(
    id        bigint generated by default as identity
        primary key,
    role_name varchar(255)
        constraint role_role_name_check
            check ((role_name)::text = ANY
                   ((ARRAY ['ROLE_ADMIN'::character varying, 'ROLE_USER'::character varying])::text[]))
);

create table role_authorities
(
    role_id        bigint not null
        constraint fkbyfnfkpgrf4jmo3nf97arsphd
            references role,
    authorities_id bigint not null
        constraint fkbev4dhldif9dgsh9dtwb6t81m
            references authority,
    primary key (role_id, authorities_id)
);

create table tag
(
    id   bigint generated by default as identity
        primary key,
    name varchar(255)
);

create table "user"
(
    id       bigint generated by default as identity
        primary key,
    password varchar(255),
    username varchar(255)
);

create table post
(
    id         bigint generated by default as identity
        primary key,
    created_at timestamp(6),
    status     varchar(255)
        constraint post_status_check
            check ((status)::text = ANY ((ARRAY ['PUBLISHED'::character varying, 'DRAFT'::character varying])::text[])),
    title      varchar(255),
    updated_at timestamp(6),
    author_id  bigint
        constraint fkddtjvf04m68hpcvlce6oavufr
            references "user"
);

create table comment
(
    id          bigint generated by default as identity
        primary key,
    author_name varchar(255),
    content     varchar(255),
    created_at  timestamp(6),
    post_id     bigint
        constraint fks1slvnkuemjsq2kj4h3vhx7i1
            references post
);

create table media
(
    id        bigint generated by default as identity
        primary key,
    file_name varchar(255),
    type      varchar(255)
        constraint media_type_check
            check ((type)::text = ANY
                   ((ARRAY ['AUDIO'::character varying, 'VIDEO'::character varying, 'TEXT'::character varying, 'IMAGE'::character varying])::text[])),
    url       varchar(255),
    post_id   bigint
        constraint fka53unad5f5hkapdfirbscm8n6
            references post
);

create table post_categories
(
    post_id     bigint not null
        constraint fkkutvrbjr0w20fuw5hen2w8uij
            references post,
    category_id bigint not null
        constraint fks0acwoyjiqr9fm6199mgd6gm1
            references category,
    primary key (post_id, category_id)
);

create table post_tags
(
    post_id bigint not null
        constraint fkmmtgl185ka210lj8kenewllt1
            references post,
    tag_id  bigint not null
        constraint fkp7cfgjsujc2vl3p88qfqkpws6
            references tag,
    primary key (post_id, tag_id)
);

create table user_roles
(
    user_id  bigint not null
        constraint fk40cm955hgg5oxf1oax8mqw0c4
            references "user",
    roles_id bigint not null
        constraint fko2rmqkw5pucpp44p39quu5al5
            references role,
    primary key (user_id, roles_id)
);

-- Insert Authorities
INSERT INTO authority (id, authority_name)
VALUES (1, 'READ');
INSERT INTO authority (id, authority_name)
VALUES (2, 'CREATE');
INSERT INTO authority (id, authority_name)
VALUES (3, 'EDIT');
INSERT INTO authority (id, authority_name)
VALUES (4, 'DELETE');
-- Insert Roles
INSERT INTO role (id, role_name)
VALUES (1, 'ROLE_USER');
INSERT INTO role (id, role_name)
VALUES (2, 'ROLE_ADMIN');
-- Link Roles and Authorities
INSERT INTO role_authorities (role_id, authorities_id)
VALUES (1, 1);
INSERT INTO role_authorities (role_id, authorities_id)
VALUES (1, 2);
INSERT INTO role_authorities (role_id, authorities_id)
VALUES (2, 1);
INSERT INTO role_authorities (role_id, authorities_id)
VALUES (2, 2);
INSERT INTO role_authorities (role_id, authorities_id)
VALUES (2, 3);
INSERT INTO role_authorities (role_id, authorities_id)
VALUES (2, 4);
-- Insert Users
INSERT INTO "user" (id, username, password)
VALUES (1, 'admin', 'adminpass');
INSERT INTO "user" (id, username, password)
VALUES (2, 'user1', 'user1pass');
-- Link Users and Roles
INSERT INTO user_roles (user_id, roles_id)
VALUES (1, 2); -- admin -> ROLE_ADMIN
INSERT INTO user_roles (user_id, roles_id)
VALUES (2, 1);
-- user1 -> ROLE_USER
-- Insert Categories
INSERT INTO category (id, name)
VALUES (1, 'Technology');
INSERT INTO category (id, name)
VALUES (2, 'Art');
-- Insert Posts (with created_at, updated_at, status)
INSERT INTO post (id, title, author_id,post_type, created_at, updated_at, status)
VALUES (1, 'First Post', 1,'PUBLIC_POST', NOW(), NOW(), 'PUBLISHED');
INSERT INTO post (id, title, author_id,post_type, created_at, updated_at, status)
VALUES (2, 'Second Post', 1,'SUBSCRIPTION_POST', NOW(), NOW(), 'DRAFT');
-- Insert Media (with post_id)
INSERT INTO media (id, url, type, post_id)
VALUES (1, 'https://example.com/image1.jpg', 'IMAGE', 1);
INSERT INTO media (id, url, type, post_id)
VALUES (2, 'https://example.com/video1.mp4', 'VIDEO', 2);
-- Insert Comments
INSERT INTO comment (id, author_id, content, post_id)
VALUES (1, 3, 'Nice post!', 1);
INSERT INTO comment (id, author_id, content, post_id)
VALUES (2, 3, 'Very helpful, thanks!', 1);
INSERT INTO comment (id, author_id, content, post_id)
VALUES (3, 3, 'Awesome video!', 2);
-- Insert Tags
INSERT INTO tag (id, name)
VALUES (1, 'Spring Boot');
INSERT INTO tag (id, name)
VALUES (2, 'Java');
INSERT INTO tag (id, name)
VALUES (3, 'Docker');
-- Link Posts and Tags
INSERT INTO post_tags (post_id, tag_id)
VALUES (1, 1); -- First Post -> Spring Boot
INSERT INTO post_tags (post_id, tag_id)
VALUES (1, 2); -- First Post -> Java
INSERT INTO post_tags (post_id, tag_id)
VALUES (2, 3);
-- Second Post -> Docker
-- Link Posts and Categories
INSERT INTO post_categories (post_id, category_id)
VALUES (1, 1);
INSERT INTO post_categories (post_id, category_id)
VALUES (1, 2);
INSERT INTO post_categories (post_id, category_id)
VALUES (2, 1);